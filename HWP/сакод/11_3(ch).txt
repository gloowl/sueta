#include <iostream>
#include <vector>

using namespace std;

void dfs(int v, vector<vector<int>> &g, vector<bool> &used, vector<int> &entry, vector<int> &exit, int &curTime)
{
    used[v] = true;

    entry[v] = curTime++;

    for (int u : g[v])
        if (!used[u])
            dfs(u, g, used, entry, exit, curTime);

    exit[v] = curTime++;
}

int main()
{
    int n;
    cin >> n;

    vector<vector<int>> g(n);
    for (int i = 0; i < n; ++i)
    {
        int neighbor;
        while (cin >> neighbor && neighbor != -1)
            g[i].push_back(neighbor);
    }

    vector<bool> used(n, false);
    vector<int> entry(n), exit(n);
    int curTime = 0;

    for (int i = 0; i < n; ++i)
        if (!used[i])
            dfs(i, g, used, entry, exit, curTime);

    for (int i = 0; i < n; ++i)
        cout <<  i << '\t' << entry[i] << " | " << exit[i] << '\n';

    return 0;
}
