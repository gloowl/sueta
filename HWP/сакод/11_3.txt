#include <iostream>
#include <vector>

using namespace std;

vector<bool> used(false);
vector<int> entryTime, exitTime;

void dfs(int v, vector<vector<int>> &g, int &curTime)
{
    used[v] = true;

    entryTime[v] = curTime++;

    for (int u : g[v])
        if (!used[u])
            dfs(u, g, curTime);

    exitTime[v] = curTime++;
}

int main()
{
    int n;
    cin >> n;

    used.resize(n);
    entryTime.resize(n);
    exitTime.resize(n);

    vector<vector<int>> g(n);
    for (int i = 0; i < n; i++)
    {
        int numOfNeighbors, neighbor;
        cin >> numOfNeighbors;

        while (numOfNeighbors--) {
            cin >> neighbor;
            g[i].push_back(neighbor);
        }
    }

    int curTime = 0;

    for (int i = 0; i < n; i++)
        if (!used[i])
            dfs(i, g, curTime);

    for (int i = 0; i < n; i++)
        cout << i << '\t' << entryTime[i] << " | " << exitTime[i] << '\n';

    return 0;
}
