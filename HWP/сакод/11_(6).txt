#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void bfs(vector<vector<int>> &g, int start, vector<int> &distances)
{
    queue<int> q;
    vector<bool> visited(g.size(), false);

    q.push(start);
    visited[start] = true;
    distances[start] = 0;

    while (!q.empty())
    {
        int node = q.front();
        q.pop();

        for (int neighbor : g[node])
        {
            if (!visited[neighbor])
            {
                q.push(neighbor);
                visited[neighbor] = true;
                distances[neighbor] = distances[node] + 1;
            }
        }
    }
}

int main()
{
    int N;
    cin >> N;

    vector<vector<int>> g(N);
    for (int i = 0; i < N; i++)
    {
        int num_neighbors;
        cin >> num_neighbors;
        for (int j = 0; j < num_neighbors; j++)
        {
            int neighbor;
            cin >> neighbor;
            g[i].push_back(neighbor);
        }
    }

    int s;
    cin >> s;

    vector<int> distances(N, -1);
    bfs(g, s, distances);

    for (int i = 0; i < N; i++)
    {
        if (i != s)
            cout << i << ": " << distances[i] << '\n';
    }

    return 0;
}
