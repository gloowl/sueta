#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main() {
    int N;
    cin >> N;

    // Создаем вектор, чтобы хранить информацию о каждом человеке.
    vector<pair<int, int>> people(N);

    // Считываем информацию о каждом человеке.
    for (int i = 0; i < N; i++) {
        cin >> people[i].first >> people[i].second;
    }

    // Создаем очередь для хранения времени выхода каждого человека.
    queue<int> exit_times;

    int current_time = 0; // Текущее время
    for (int i = 0; i < N; i++) {
        int T1 = people[i].first;
        int processing_time = people[i].second;

        // Если приход человека позже текущего времени, ждем его.
        if (T1 > current_time) {
            current_time = T1;
        }

        // Вычисляем время выхода человека и добавляем его в очередь.
        int exit_time = current_time + processing_time;
        exit_times.push(exit_time);

        // Обновляем текущее время.
        current_time = exit_time;
    }

    // Выводим время выхода каждого человека из кабинета специалиста.
    while (!exit_times.empty()) {
        cout << exit_times.front() << '\n';
        exit_times.pop();
    }

    return 0;
}


--------------------------------------------------------------------------------------------------








#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Person {
    int T1;
    int T2;
    int index;
};

bool compareArrivalTime(const Person& a, const Person& b) {
    return a.T1 < b.T1;
}

int main() {
    int N;
    cin >> N;

    vector<Person> people(N);

    for (int i = 0; i < N; i++) {
        cin >> people[i].T1 >> people[i].T2;
        people[i].index = i;
    }

    sort(people.begin(), people.end(), compareArrivalTime);

    vector<int> exit_times(N);
    int current_time = 0;

    for (int i = 0; i < N; i++) {
        current_time = max(current_time, people[i].T1);
        exit_times[people[i].index] = current_time + people[i].T2;
        current_time += people[i].T2;
    }

    for (int i = 0; i < N; i++) {
        cout << exit_times[i] << '\n';
    }

    return 0;
}


---------------------------------------------------------------------------------





#include <iostream>
#include <queue>
using namespace std;

struct Person {
    int T1;
    int T2;
};

int main() {
    int N;
    cin >> N;
    queue<Person> q;
    for (int i = 0; i < N; i++) {
        int T1, T2;
        cin >> T1 >> T2;
        q.push({T1, T2});
    }
    int current_time = 0;
    while (!q.empty()) {
        Person p = q.front();
        q.pop();
        if (p.T1 > current_time) {
            current_time = p.T1;
        }
        int exit_time = current_time + p.T2;
        cout << exit_time << '\n';
        current_time = exit_time;
    }
    return 0;
}